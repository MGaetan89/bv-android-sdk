buildscript {
    dependencies {
        classpath dep.androidPlugin
        classpath dep.crashlyticsPlugin
    }
}

apply plugin: 'com.android.application'

def hasCrashlyticsKey() {
    return file('fabric.properties').exists()
}

if (hasCrashlyticsKey()) {
    apply plugin: 'io.fabric'
}

def hasAppdemoBuildSettings() {
    return hasProperty('BVSDK_DEMOAPP_STORE_FILE') && file(BVSDK_DEMOAPP_STORE_FILE).exists() && hasProperty('BVSDK_DEMOAPP_STORE_PASSWORD') && hasProperty('BVSDK_DEMOAPP_KEY_ALIAS') && hasProperty('BVSDK_DEMOAPP_KEY_PASSWORD');
}

gradle.startParameter.getTaskNames().each { task ->
    if (task.toLowerCase().contains("demo")) {
        rootProject.ext.analyticsEnabled = false
    } else if (task.toLowerCase().contains("live")) {
        rootProject.ext.analyticsEnabled = true
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibilityVersion
        targetCompatibility rootProject.ext.targetCompatibilityVersion
    }

    dexOptions {
        // Skip pre-dexing when running on CI server or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !isCi
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'
    }

    signingConfigs {
        release {
            if (hasAppdemoBuildSettings()) {
                storeFile file(BVSDK_DEMOAPP_STORE_FILE)
                storePassword BVSDK_DEMOAPP_STORE_PASSWORD
                keyAlias BVSDK_DEMOAPP_KEY_ALIAS
                keyPassword BVSDK_DEMOAPP_KEY_PASSWORD
            }
        }
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
    }

    productFlavors {
        live {}
        demo {}
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix '.debug'
            debuggable true
        }
    }

    buildTypes.each {
        it.buildConfigField 'boolean', 'HAS_CRASHLYTICS_KEY',  String.valueOf(hasCrashlyticsKey())
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile project(':bvandroidsdkadvertising')
    compile project(':bvandroidsdkrecommendations')
    compile project(':bvandroidsdkconversations')
    compile project(':bvandroidsdkcurations')

    compile dep.picasso
    compile dep.prettyTime
    compile dep.appCompatV7
    compile dep.designCompat
    compile dep.supportV4
    compile dep.cardview
    compile dep.preferenceV7
    compile dep.preferenceV14
    compile dep.playServiceAds
    compile dep.ddPlist
    compile dep.circleIndicator

    // iovation aar dependency
    // compile(name:'deviceprint-release-2.3.0', ext:'aar')

    releaseCompile dep.leakCanaryNoOp

    debugCompile dep.leakCanary
    testCompile dep.junit
    compile(dep.crashlytics) {
        transitive = true;
    }
}



