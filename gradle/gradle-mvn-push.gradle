/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'nu.studer.credentials'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def isOpenSourceRelease() {
    return hasProperty('openSourceRelease') && openSourceRelease == true
}

def getReleaseRepositoryUrl() {
    if (isOpenSourceRelease()) {
        // if -PopenSourceRelease=true is passed in then get BV Maven Repo URL
        return "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    } else {
        if (hasProperty('RELEASE_REPOSITORY_URL')) {
            // else get the BV Maven Repo URL if it exists
            return RELEASE_REPOSITORY_URL
        } else {
            throw new GradleException("RELEASE_REPOSITORY_URL must be defined in " +
                    "~/.gradle/gradle.properties and point to the internal BV maven repo")
        }
    }
}

def getSnapshotRepositoryUrl() {
    if (isOpenSourceRelease()) {
        // if -PopenSourceRelease=true is passed in then get BV Maven Repo URL
        return "https://oss.sonatype.org/content/repositories/snapshots/"
    } else {
        if (hasProperty('SNAPSHOT_REPOSITORY_URL')) {
            // else get the BV Maven Repo URL if it exists
            return SNAPSHOT_REPOSITORY_URL
        } else {
            throw new GradleException("SNAPSHOT_REPOSITORY_URL must be defined in " +
                    "~/.gradle/gradle.properties and point to the internal BV maven repo")
        }
    }
}

def getRepositoryUsername() {
    if (isOpenSourceRelease()) {
        if (hasProperty('OPEN_SOURCE_NEXUS_USER')) {
            return OPEN_SOURCE_NEXUS_USER
        } else {
            throw new GradleException("OPEN_SOURCE_NEXUS_USER must be defined in " +
                    "~/.gradle/gradle.properties")
        }
    } else {
        if (hasProperty('NEXUS_USER')) {
            return NEXUS_USER
        } else {
            throw new GradleException("NEXUS_USER must be defined in " +
                    "~/.gradle/gradle.properties")
        }
    }
}

def getRepositoryPassword() {
    if (isOpenSourceRelease()) {
        if (credentials.OPEN_SOURCE_NEXUS_PASSWORD != null) {
            return credentials.OPEN_SOURCE_NEXUS_PASSWORD
        } else {
            throw new GradleException("OPEN_SOURCE_NEXUS_PASSWORD must be defined in " +
                    "~/.gradle/gradle.encrypted.properties")
        }
    } else {
        if (credentials.NEXUS_PASSWORD != null) {
            return credentials.NEXUS_PASSWORD
        } else {
            throw new GradleException("NEXUS_PASSWORD must be defined in " +
                    "~/.gradle/gradle.encrypted.properties")
        }
    }
}

afterEvaluate { project ->
    uploadArchives {
        logger.info("BVSDK Upload Archives for " + POM_ARTIFACT_ID)

        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')) {
        task install(type: Upload, dependsOn: assemble) {
            repositories.mavenInstaller {
                configuration = configurations.archives

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }

        task androidJavadocs(type: Javadoc) {
            source = android.sourceSets.main.java.source
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }

        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            classifier = 'javadoc'
            from androidJavadocs.destinationDir
        }

        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.source
        }
    } else {
        install {
            repositories.mavenInstaller {
                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    artifacts {
        if (project.getPlugins().hasPlugin('com.android.application') ||
                project.getPlugins().hasPlugin('com.android.library')) {
            archives androidSourcesJar
            archives androidJavadocsJar
        } else {
            archives sourcesJar
            archives javadocJar
        }
    }
}